"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7476],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),p=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=p(r),g=n,h=c["".concat(u,".").concat(g)]||c[g]||d[g]||o;return r?a.createElement(h,s(s({ref:t},l),{},{components:r})):a.createElement(h,s({ref:t},l))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},81290:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=r(83117),n=(r(67294),r(3905));const o={title:"Creating or Updating Users And Groups",slug:"/api/tutorials/creating-users-and-groups",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/creating-users-and-groups.md"},s="Creating or Updating Users And Groups",i={unversionedId:"docs/api/tutorials/creating-users-and-groups",id:"docs/api/tutorials/creating-users-and-groups",title:"Creating or Updating Users And Groups",description:"Why Would You Create or Update Users and Groups?",source:"@site/genDocs/docs/api/tutorials/creating-users-and-groups.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/creating-users-and-groups",permalink:"/datahub-project-forked/docs/api/tutorials/creating-users-and-groups",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/creating-users-and-groups.md",tags:[],version:"current",frontMatter:{title:"Creating or Updating Users And Groups",slug:"/api/tutorials/creating-users-and-groups",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/creating-users-and-groups.md"},sidebar:"overviewSidebar",previous:{title:"Creating Terms",permalink:"/datahub-project-forked/docs/api/tutorials/creating-terms"},next:{title:"Adding Tags On Datasets/Columns",permalink:"/datahub-project-forked/docs/api/tutorials/adding-tags"}},u={},p=[{value:"Why Would You Create or Update Users and Groups?",id:"why-would-you-create-or-update-users-and-groups",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Upsert Users And Groups With Datahub CLI",id:"upsert-users-and-groups-with-datahub-cli",level:2},{value:"Upsert User",id:"upsert-user",level:3},{value:"Upsert Group",id:"upsert-group",level:3},{value:"Upsert Users And Groups With Python SDK",id:"upsert-users-and-groups-with-python-sdk",level:2},{value:"Upsert User",id:"upsert-user-1",level:3},{value:"Upsert Group",id:"upsert-group-1",level:3},{value:"Expected Outcomes",id:"expected-outcomes",level:2},{value:"User",id:"user",level:3},{value:"Group",id:"group",level:3},{value:"What&#39;s Next?",id:"whats-next",level:2}],l={toc:p};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"creating-or-updating-users-and-groups"},"Creating or Updating Users And Groups"),(0,n.kt)("h2",{id:"why-would-you-create-or-update-users-and-groups"},"Why Would You Create or Update Users and Groups?"),(0,n.kt)("p",null,"Users and groups are essential for managing ownership of data.\nBy creating or updating user accounts and assigning them to appropriate groups, administrators can ensure that the right people can access the data they need to do their jobs.\nThis helps to avoid confusion or conflicts over who is responsible for specific datasets and can improve the overall effectiveness. "),(0,n.kt)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,n.kt)("p",null,"This guide will show you how to create or update users and groups."),(0,n.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,n.kt)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed information, please refer to ",(0,n.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/api/tutorials/references/prepare-datahub"},"Preparing Your Local DataHub Environment"),"."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"In this guide, ingesting sample data is optional.")),(0,n.kt)("h2",{id:"upsert-users-and-groups-with-datahub-cli"},"Upsert Users And Groups With Datahub CLI"),(0,n.kt)("p",null,"You can ingest users and groups with ",(0,n.kt)("inlineCode",{parentName:"p"},"yaml")," using Datahub CLI. "),(0,n.kt)("h3",{id:"upsert-user"},"Upsert User"),(0,n.kt)("p",null,"Save this ",(0,n.kt)("inlineCode",{parentName:"p"},"user.yaml")," as a local file."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'- id: bar@acryl.io\n  first_name: The\n  last_name: Bar\n  email: bar@acryl.io\n  slack: "@the_bar_raiser"\n  description: "I like raising the bar higher"\n  groups:\n    - foogroup@acryl.io\n- id: datahub\n  slack: "@datahubproject"\n  phone: "1-800-GOT-META"\n  description: "The DataHub Project"\n  picture_link: "https://raw.githubusercontent.com/datahub-project/datahub/master/datahub-web-react/src/images/datahub-logo-color-stable.svg"\n')),(0,n.kt)("p",null,"Execute the following CLI command to ingest user data.\nSince the user datahub already exists in the sample data, any updates made to the user information will overwrite the existing data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"datahub user upsert -f user.yaml\n")),(0,n.kt)("p",null,"If you see the following logs, the operation was successful:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Update succeeded for urn urn:li:corpuser:bar@acryl.io.\nUpdate succeeded for urn urn:li:corpuser:datahub.\n")),(0,n.kt)("h3",{id:"upsert-group"},"Upsert Group"),(0,n.kt)("p",null,"Save this ",(0,n.kt)("inlineCode",{parentName:"p"},"group.yaml")," as a local file. Note that the group includes a list of users who are admins (these will be marked as owners) and members.\nWithin these lists, you can refer to the users by their ids or their urns, and can additionally specify their metadata inline within the group description itself. See the example below to understand how this works and feel free to make modifications to this file locally to see the effects of your changes in your local DataHub instance."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'id: foogroup@acryl.io\ndisplay_name: Foo Group\nadmins:\n  - datahub\nmembers:\n  - bar@acryl.io # refer to a user either by id or by urn\n  - id: joe@acryl.io # inline specification of user\n    slack: "@joe_shmoe"\n    display_name: "Joe\'s Hub"\n')),(0,n.kt)("p",null,"Execute the following CLI command to ingest this group's information. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"datahub group upsert -f group.yaml\n")),(0,n.kt)("p",null,"If you see the following logs, the operation was successful:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Update succeeded for group urn:li:corpGroup:foogroup@acryl.io.\n")),(0,n.kt)("h2",{id:"upsert-users-and-groups-with-python-sdk"},"Upsert Users And Groups With Python SDK"),(0,n.kt)("h3",{id:"upsert-user-1"},"Upsert User"),(0,n.kt)("p",null,"The following code creates a user named ",(0,n.kt)("inlineCode",{parentName:"p"},"The Bar")," with urn ",(0,n.kt)("inlineCode",{parentName:"p"},"urn:li:corpuser:bar@acryl.io"),".\nYou can refer to the full code in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/upsert_user.py"},"upsert_user.py"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.emitter.mce_builder import make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import CorpUserInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nuser_urn = make_user_urn("bar@acryl.io")\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=user_urn,\n    aspect=CorpUserInfoClass(\n        active=True,\n        displayName="The Bar",\n        email="bar@acryl.io",\n        title="Software Engineer",\n        firstName="The",\n        lastName="Bar",\n        fullName="The Bar",\n    ),\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\nlog.info(f"Upserted user {user_urn}")\n')),(0,n.kt)("h3",{id:"upsert-group-1"},"Upsert Group"),(0,n.kt)("p",null,"The following code creates a group called ",(0,n.kt)("inlineCode",{parentName:"p"},"Foo Group")," with group ",(0,n.kt)("inlineCode",{parentName:"p"},"urn:li:corpgroup:foogroup@acryl.io"),".\nYou can refer to the full code in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/upsert_group.py"},"upsert_group.py"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.emitter.mce_builder import make_group_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import CorpGroupInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ngroup_urn = make_group_urn("foogroup@acryl.io")\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=group_urn,\n    aspect=CorpGroupInfoClass(\n        admins=["urn:li:corpuser:datahub"],\n        members=["urn:li:corpuser:bar@acryl.io", "urn:li:corpuser:joe@acryl.io"],\n        groups=[],\n        displayName="Foo Group",\n        email="foogroup@acryl.io",\n        description="Software engineering team",\n        slack="@foogroup",\n    ),\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\nlog.info(f"Upserted group {group_urn}")\n')),(0,n.kt)("p",null,"We're using the ",(0,n.kt)("inlineCode",{parentName:"p"},"MetdataChangeProposalWrapper")," to change entities in this example.\nFor more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"MetadataChangeProposal"),", please refer to ",(0,n.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/advanced/mcp-mcl"},"MetadataChangeProposal & MetadataChangeLog Events")),(0,n.kt)("h2",{id:"expected-outcomes"},"Expected Outcomes"),(0,n.kt)("h3",{id:"user"},"User"),(0,n.kt)("p",null,"You can see the user ",(0,n.kt)("inlineCode",{parentName:"p"},"The bar")," has been created and the user ",(0,n.kt)("inlineCode",{parentName:"p"},"Datahub")," has been updated under ",(0,n.kt)("inlineCode",{parentName:"p"},"Settings > Access > Users & Groups"),"\n",(0,n.kt)("img",{alt:"user-upserted",src:r(58613).Z,width:"2308",height:"1044"})),(0,n.kt)("h3",{id:"group"},"Group"),(0,n.kt)("p",null,"You can see the group ",(0,n.kt)("inlineCode",{parentName:"p"},"Foo Group")," has been created under ",(0,n.kt)("inlineCode",{parentName:"p"},"Settings > Access > Users & Groups"),"\n",(0,n.kt)("img",{alt:"group-upserted",src:r(47707).Z,width:"1730",height:"1064"})),(0,n.kt)("h2",{id:"whats-next"},"What's Next?"),(0,n.kt)("p",null,"Now that you created users and groups, how about adding them as an owner to a dataset? Here's a guide on ",(0,n.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/api/tutorials/adding-ownerships"},"how to add an owner on a dataset"),"."))}d.isMDXComponent=!0},47707:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/group-upserted-5a49050893fab3d2184594718b03fc20.png"},58613:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/user-upserted-6e5b7d72ce1bc70f5b4cfd833b010f64.png"}}]);