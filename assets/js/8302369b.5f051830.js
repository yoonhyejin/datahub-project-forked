"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3186],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),l=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(r),g=n,m=c["".concat(u,".").concat(g)]||c[g]||d[g]||o;return r?a.createElement(m,s(s({ref:t},p),{},{components:r})):a.createElement(m,s({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},89396:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(83117),n=(r(67294),r(3905));const o={title:"Creating Users And Groups",slug:"/tools/tutorials/creating-users-and-groups",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/tools/tutorials/creating-users-and-groups.md"},s="Creating Users And Groups",i={unversionedId:"docs/tools/tutorials/creating-users-and-groups",id:"docs/tools/tutorials/creating-users-and-groups",title:"Creating Users And Groups",description:"Why Would You Create Users and Groups?",source:"@site/genDocs/docs/tools/tutorials/creating-users-and-groups.md",sourceDirName:"docs/tools/tutorials",slug:"/tools/tutorials/creating-users-and-groups",permalink:"/datahub-project-forked/docs/tools/tutorials/creating-users-and-groups",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/tools/tutorials/creating-users-and-groups.md",tags:[],version:"current",frontMatter:{title:"Creating Users And Groups",slug:"/tools/tutorials/creating-users-and-groups",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/tools/tutorials/creating-users-and-groups.md"},sidebar:"overviewSidebar",previous:{title:"Adding Lineage",permalink:"/datahub-project-forked/docs/tools/tutorials/adding-lineage"},next:{title:"Generate Access Token",permalink:"/datahub-project-forked/docs/tools/tutorials/references/generate-access-token"}},u={},l=[{value:"Why Would You Create Users and Groups?",id:"why-would-you-create-users-and-groups",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Create Users And Groups With Python CLI",id:"create-users-and-groups-with-python-cli",level:2},{value:"Create User",id:"create-user",level:3},{value:"Create Group",id:"create-group",level:3},{value:"Create Users And Groups With Python SDK",id:"create-users-and-groups-with-python-sdk",level:2},{value:"Create User",id:"create-user-1",level:3},{value:"Create Group",id:"create-group-1",level:3},{value:"Expected Outcomes",id:"expected-outcomes",level:2},{value:"User",id:"user",level:3},{value:"Group",id:"group",level:3}],p={toc:l};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"creating-users-and-groups"},"Creating Users And Groups"),(0,n.kt)("h2",{id:"why-would-you-create-users-and-groups"},"Why Would You Create Users and Groups?"),(0,n.kt)("p",null,"Users and groups are essential for managing ownership of data.\nBy creating user accounts and assigning them to appropriate groups, administrators can ensure that the right people can access the data they need to do their jobs.\nThis helps to avoid confusion or conflicts over who is responsible for specific datasets and can improve the overall effectiveness. "),(0,n.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,n.kt)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed information, please refer to ",(0,n.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/tools/tutorials/references/prepare-datahub"},"Preparing Your Local DataHub Environment"),"."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"In this guide, ingesting sample data is optional.")),(0,n.kt)("h2",{id:"create-users-and-groups-with-python-cli"},"Create Users And Groups With Python CLI"),(0,n.kt)("p",null,"You can ingest users and groups with ",(0,n.kt)("inlineCode",{parentName:"p"},"yaml")," using Python CLI. "),(0,n.kt)("h3",{id:"create-user"},"Create User"),(0,n.kt)("p",null,"Save this ",(0,n.kt)("inlineCode",{parentName:"p"},"user.yaml")," to your local. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"id: janedoe@acryl.io\nslack: @janedoe\nemail: janedoe@acryl.io\nfirst_name: Jane\nlast_name: Doe\n")),(0,n.kt)("p",null,"Execute the following CLI command to ingest user data. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"datahub user create -c user.yaml\n")),(0,n.kt)("h3",{id:"create-group"},"Create Group"),(0,n.kt)("p",null,"Save this ",(0,n.kt)("inlineCode",{parentName:"p"},"group.yaml")," to your local. Note that "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'id: engineering\ndisplay_name: Engineering\nadmins:\n  - "janedoe@acryl.io"\nmembers:\n  - "jane@acryl.io" # refer to a user either by id or by urn\n  - id: "joe@acryl.io" # inline specification of user\n    slack: "@joe_shmoe"\n    display_name: "Joe\'s Hub"\n')),(0,n.kt)("p",null,"Execute the following CLI command to ingest user data. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"datahub group create -c group.yaml\n")),(0,n.kt)("h2",{id:"create-users-and-groups-with-python-sdk"},"Create Users And Groups With Python SDK"),(0,n.kt)("h3",{id:"create-user-1"},"Create User"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.emitter.mce_builder import make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import CorpUserInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nuser_urn = make_user_urn("janedoe")\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=user_urn,\n    aspect=CorpUserInfoClass(active=True,\n                             displayName="Jane Doe",\n                             email="janedoe@acryl.io",\n                             title="Software Engineer",\n                             firstName="Jane",\n                             lastName="Doe",\n                             fullName="Jane Doe"),\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\nlog.info(f"Created user {user_urn}")\n')),(0,n.kt)("p",null,"This will create a user named ",(0,n.kt)("inlineCode",{parentName:"p"},"Jane Doe")," with urn ",(0,n.kt)("inlineCode",{parentName:"p"},"urn:li:corpuser:janedoe"),"."),(0,n.kt)("h3",{id:"create-group-1"},"Create Group"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import logging\n\nfrom datahub.emitter.mce_builder import make_group_urn, make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import CorpGroupInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ngroup_urn = make_group_urn("engineering")\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=group_urn,\n    aspect=CorpGroupInfoClass(admins=["urn:li:corpuser:janedoe"],\n                              members=["urn:li:corpuser:janedoe", "urn:li:corpuser:joe"],\n                              groups=[],\n                              displayName="Engineering",\n                              email="engineering@acryl.io",\n                              description="Software engineering team",\n                              slack="@engineering"),\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\nlog.info(f"Created user {group_urn}")\n')),(0,n.kt)("p",null,"This will create a group called ",(0,n.kt)("inlineCode",{parentName:"p"},"Engineering")," with group ",(0,n.kt)("inlineCode",{parentName:"p"},"urn:li:corpgroup:engineering"),"."),(0,n.kt)("p",null,"We're using the ",(0,n.kt)("inlineCode",{parentName:"p"},"MetdataChangeProposalWrapper")," to change entities in this example.\nFor more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"MetadataChangeProposal"),", please refer to ",(0,n.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/advanced/mcp-mcl"},"MetadataChangeProposal & MetadataChangeLog Events")),(0,n.kt)("h2",{id:"expected-outcomes"},"Expected Outcomes"),(0,n.kt)("h3",{id:"user"},"User"),(0,n.kt)("p",null,"You can see user ",(0,n.kt)("inlineCode",{parentName:"p"},"Jane Doe")," has beend created under ",(0,n.kt)("inlineCode",{parentName:"p"},"Settings > Access > Users & Groups"),"\n",(0,n.kt)("img",{alt:"user-added",src:r(69873).Z,width:"1054",height:"385"})),(0,n.kt)("h3",{id:"group"},"Group"),(0,n.kt)("p",null,"You can see group ",(0,n.kt)("inlineCode",{parentName:"p"},"Engineering")," has beend created under ",(0,n.kt)("inlineCode",{parentName:"p"},"Settings > Access > Users & Groups"),"\n",(0,n.kt)("img",{alt:"group-added",src:r(502).Z,width:"2506",height:"1212"})))}d.isMDXComponent=!0},502:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/group-added-4c2acdca19402c65099868d0e82599d4.png"},69873:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/user-added-8fe620a3a0a10796f32d623ec62572c3.png"}}]);