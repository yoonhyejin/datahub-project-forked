"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4414],{4340:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(23659),i=n(67294);const r={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"}}]},name:"close-circle",theme:"filled"};var s=n(28308),o=function(e,t){return i.createElement(s.Z,(0,a.Z)((0,a.Z)({},e),{},{ref:t,icon:r}))};o.displayName="CloseCircleFilled";const l=i.forwardRef(o)},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),h=i,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||r;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},53502:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(67294),i=n(86010);const r="availabilityCard_P5od",s="managedIcon_AxXO",o="platform_wqXv",l="platformAvailable_Y8lN";var c=n(4340),d=n(23659);const u={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};var p=n(28308),h=function(e,t){return a.createElement(p.Z,(0,d.Z)((0,d.Z)({},e),{},{ref:t,icon:u}))};h.displayName="CheckCircleFilled";const m=a.forwardRef(h);const k={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3zm36.3 281a123.07 123.07 0 01-87.6 36.3H263.9c-33.1 0-64.2-12.9-87.6-36.3A123.3 123.3 0 01140 612c0-28 9.1-54.3 26.2-76.3a125.7 125.7 0 0166.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0152.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10c54.3 14.5 92.1 63.8 92.1 120 0 33.1-12.9 64.3-36.3 87.7z"}}]},name:"cloud",theme:"outlined"};var f=function(e,t){return a.createElement(p.Z,(0,d.Z)((0,d.Z)({},e),{},{ref:t,icon:k}))};f.displayName="CloudOutlined";const g=a.forwardRef(f),b=e=>{let{saasOnly:t,ossOnly:n}=e;return a.createElement("div",{className:(0,i.Z)(r,"card")},a.createElement("strong",null,"Feature Availability"),a.createElement("div",null,a.createElement("span",{className:(0,i.Z)(o,!t&&l)},"Self-Hosted DataHub ",t?a.createElement(c.Z,null):a.createElement(m,null))),a.createElement("div",null,a.createElement(g,{className:s}),a.createElement("span",{className:(0,i.Z)(o,!n&&l)},"Managed DataHub ",n?a.createElement(c.Z,null):a.createElement(m,null))))}},98298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(83117),i=(n(67294),n(3905)),r=n(53502);const s={description:"This page provides an overview of working with the DataHub Incidents API.",title:"Incidents API (Beta)",slug:"/managed-datahub/datahub-api/graphql-api/incidents-api-beta",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/datahub-api/graphql-api/incidents-api-beta.md"},o="Incidents API (Beta)",l={unversionedId:"docs/managed-datahub/datahub-api/graphql-api/incidents-api-beta",id:"docs/managed-datahub/datahub-api/graphql-api/incidents-api-beta",title:"Incidents API (Beta)",description:"This page provides an overview of working with the DataHub Incidents API.",source:"@site/genDocs/docs/managed-datahub/datahub-api/graphql-api/incidents-api-beta.md",sourceDirName:"docs/managed-datahub/datahub-api/graphql-api",slug:"/managed-datahub/datahub-api/graphql-api/incidents-api-beta",permalink:"/datahub-project-forked/docs/managed-datahub/datahub-api/graphql-api/incidents-api-beta",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/datahub-api/graphql-api/incidents-api-beta.md",tags:[],version:"current",frontMatter:{description:"This page provides an overview of working with the DataHub Incidents API.",title:"Incidents API (Beta)",slug:"/managed-datahub/datahub-api/graphql-api/incidents-api-beta",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/datahub-api/graphql-api/incidents-api-beta.md"},sidebar:"overviewSidebar",previous:{title:"Getting Started",permalink:"/datahub-project-forked/docs/managed-datahub/datahub-api/graphql-api/getting-started"},next:{title:"AWS PrivateLink",permalink:"/datahub-project-forked/docs/managed-datahub/integrations/aws-privatelink"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Creating an Incident",id:"creating-an-incident",level:2},{value:"Examples",id:"examples",level:3},{value:"CURL",id:"curl",level:4},{value:"Python",id:"python",level:4},{value:"Retrieving Active Incidents",id:"retrieving-active-incidents",level:2},{value:"Datasets",id:"datasets",level:3},{value:"Examples",id:"examples-1",level:3},{value:"CURL",id:"curl-1",level:4},{value:"Resolving an Incident",id:"resolving-an-incident",level:2},{value:"Examples",id:"examples-2",level:3},{value:"CURL",id:"curl-2",level:4},{value:"Tips",id:"tips",level:2},{value:"Enabling Slack Notifications",id:"enabling-slack-notifications",level:2}],u={toc:d};function p(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"incidents-api-beta"},"Incidents API (Beta)"),(0,i.kt)(r.Z,{saasOnly:!0,mdxType:"FeatureAvailability"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Incidents")," are a concept used to flag particular Data Assets as being in an unhealthy state. Each incident has an independent lifecycle and details including a state (active, resolved), a title, a description, & more."),(0,i.kt)("p",null,"A couple scenarios in which incidents can be useful are"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Pipeline Circuit Breaking:")," You can use Incidents as the basis for intelligent data pipelines that verify upstream inputs (e.g. datasets) are free of any active incidents before executing."),(0,i.kt)("li",{parentName:"ol"},"[","Coming Soon] ",(0,i.kt)("strong",{parentName:"li"},"Announcing Known-Bad Assets"),": You can mark a known-bad data asset as under an ongoing incident so consumers and stakeholders can be informed about the health status of a data asset via the DataHub UI. Moreover, they can follow the incident as it progresses toward resolution.")),(0,i.kt)("p",null,"In the next section, we'll show you how to"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new incident"),(0,i.kt)("li",{parentName:"ol"},"Fetch all incidents for a data asset"),(0,i.kt)("li",{parentName:"ol"},"Resolve an incident")),(0,i.kt)("p",null,"for ",(0,i.kt)("strong",{parentName:"p"},"Datasets")," using the Acryl ",(0,i.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/api/graphql/overview"},"GraphQL API"),"."),(0,i.kt)("p",null,"Let's get started!"),(0,i.kt)("h2",{id:"creating-an-incident"},"Creating an Incident"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Creating incidents is currently only supported against ",(0,i.kt)("strong",{parentName:"p"},"Dataset")," assets.")),(0,i.kt)("p",null,"To create (i.e. raise) a new incident for a data asset, simply create a GraphQL request using the ",(0,i.kt)("inlineCode",{parentName:"p"},"raiseIncident")," mutation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'type Mutation {\n    """\n    Raise a new incident for a data asset \n    """\n    raiseIncident(input: RaiseIncidentInput!): String! # Returns new Incident URN.\n}\n\ninput RaiseIncidentInput {\n  """\n  The type of incident, e.g. OPERATIONAL\n  """\n  type: IncidentType!\n\n  """\n  A custom type of incident. Present only if type is \'CUSTOM\'\n  """\n  customType: String\n\n  """\n  An optional title associated with the incident\n  """\n  title: String\n\n  """\n  An optional description associated with the incident\n  """\n  description: String\n\n  """\n  The resource (dataset, dashboard, chart, dataFlow, etc) that the incident is associated with.\n  """\n  resourceUrn: String!\n\n  """\n  The source of the incident, i.e. how it was generated\n  """\n  source: IncidentSourceInput\n}\n')),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("p",null,"First, we'll create a demo GraphQL query, then show how to represent it via CURL & Python."),(0,i.kt)("p",null,"Imagine we want to raise a new incident on a Dataset with URN ",(0,i.kt)("inlineCode",{parentName:"p"},"urn:li:dataset:(abc)")," because it's failed automated quality checks. To do so, we could make the following GraphQL query:"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Request")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'mutation raiseIncident {\n  raiseIncident(input: {\n    type: OPERATIONAL\n    title: "Dataset Failed Quality Checks"\n    description: "Dataset failed 2/6 Quality Checks for suite run id xy123mksj812pk23."\n    resourceUrn: "urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)"\n  })\n}\n')),(0,i.kt)("p",null,"After we make this query, we will get back a unique URN for the incident."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "data": {\n    "raiseIncident": "urn:li:incident:bfecab62-dc10-49a6-a305-78ce0cc6e5b1"\n  }\n}\n')),(0,i.kt)("p",null,"Now we'll see how to issue this query using a CURL or Python."),(0,i.kt)("h4",{id:"curl"},"CURL"),(0,i.kt)("p",null,"To issue the above GraphQL as a CURL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'curl --location --request POST \'https://your-account.acryl.io/api/graphql\' \\\n--header \'Authorization: Bearer your-access-token\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{"query":"mutation raiseIncident {\\n  raiseIncident(input: {\\n    type: OPERATIONAL\\n    title: \\"Dataset Failed Quality Checks\\"\\n    description: \\"Dataset failed 2/6 Quality Checks for suite run id xy123mksj812pk23.\\"\\n    resourceUrn: \\"urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)\\"\\n  })\\n}","variables":{}}\'\n')),(0,i.kt)("h4",{id:"python"},"Python"),(0,i.kt)("p",null,"To issue the above GraphQL query in Python (requests):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'import requests\n\ndatahub_session = requests.Session()\n\nheaders = {\n    "Content-Type": "application/json",\n    "Authorization": "Bearer your-personal-access-token",\n}\n\njson = {\n    "query": """mutation raiseIncident {\\n\n      raiseIncident(input: {\\n\n        type: OPERATIONAL\\n\n        resourceUrn: \\"urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)\\"\\n\n      })}""",\n    "variables": {},\n}\n\nresponse = datahub_session.post(f"https://your-account.acryl.io/api/graphql", headers=headers, json=json)\nresponse.raise_for_status()\nres_data = response.json() # Get result as JSON\n')),(0,i.kt)("h2",{id:"retrieving-active-incidents"},"Retrieving Active Incidents"),(0,i.kt)("p",null,"To fetch the the ongoing incidents for a data asset, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"incidents")," GraphQL field on the entity of interest."),(0,i.kt)("h3",{id:"datasets"},"Datasets"),(0,i.kt)("p",null,"To retrieve all incidents for a Dataset with a particular ",(0,i.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/what/urn"},"URN"),", you can reference the 'incidents' field of the Dataset type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'type Dataset {\n  ....\n  """\n  Incidents associated with the Dataset\n  """\n  incidents(\n    """\n    Optional incident state to filter by, defaults to any state.\n    """\n    state: IncidentState,\n    """\n    Optional start offset, defaults to 0.\n    """\n    start: Int,\n    """\n    Optional start offset, defaults to 20.\n    """\n    count: Int): EntityIncidentsResult # Returns a list of incidents. \n}\n')),(0,i.kt)("h3",{id:"examples-1"},"Examples"),(0,i.kt)("p",null,'Now that we\'ve raised an incident on it, imagine we want to fetch the first 10 "active" incidents for the Dataset with URN ',(0,i.kt)("inlineCode",{parentName:"p"},"urn:li:dataset:(abc"),"). To do so, we could issue the following request:"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Request")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'query dataset {\n  dataset(urn: "urn:li:dataset:(abc)") {\n    incidents(state: ACTIVE, start: 0, count: 10) {\n      total\n      incidents {\n        urn\n        title\n        description\n        status {\n          state\n        }\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"After we make this query, we will get back a unique URN for the incident."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "data": {\n    "dataset": {\n      "incidents": {\n        "total": 1,\n        "incidents": [\n          {\n            "urn": "urn:li:incident:bfecab62-dc10-49a6-a305-78ce0cc6e5b1",\n            "title": "Dataset Failed Quality Check",\n            "description": "Dataset failed 2/6 Quality Checks for suite run id xy123mksj812pk23.",\n            "status": {\n              "state": "ACTIVE"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Now we'll see how to issue this query using a CURL or Python."),(0,i.kt)("h4",{id:"curl-1"},"CURL"),(0,i.kt)("p",null,"To issue the above GraphQL as a CURL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"curl --location --request POST 'https://your-account.acryl.io/api/graphql' \\\n--header 'Authorization: Bearer your-access-token' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"query\":\"query dataset {\\n dataset(urn: \"urn:li:dataset:(abc)\") {\\n incidents(state: ACTIVE, start: 0, count: 10) {\\n total\\n incidents {\\n urn\\n title\\n description\\n status {\\n state\\n }\\n }\\n }\\n }\\n}\",\"variables\":{}}'Python\n")),(0,i.kt)("p",null,"To issue the above GraphQL query in Python (requests):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'import requests\n\ndatahub_session = requests.Session()\n\nheaders = {\n    "Content-Type": "application/json",\n    "Authorization": "Bearer your-personal-access-token",\n}\n\njson = {\n    "query": """query dataset {\\n\n                  dataset(urn: "urn:li:dataset:(abc)") {\\n\n                    incidents(state: ACTIVE, start: 0, count: 10) {\\n\n                      total\\n\n                      incidents {\\n\n                        urn\\n\n                        title\\n\n                        description\\n\n                        status {\\n\n                          state\\n\n                        }\\n\n                      }\\n\n                    }\\n\n                  }\\n\n                }""",\n    "variables": {},\n}\n\nresponse = datahub_session.post(f"https://your-account.acryl.io/api/graphql", headers=headers, json=json)\nresponse.raise_for_status()\nres_data = response.json() # Get result as JSON\n')),(0,i.kt)("h2",{id:"resolving-an-incident"},"Resolving an Incident"),(0,i.kt)("p",null,"To resolve an incident for a data asset, simply create a GraphQL request using the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateIncidentStatus")," mutation. To mark an incident as resolved, simply update its state to ",(0,i.kt)("inlineCode",{parentName:"p"},"RESOLVED"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'type Mutation {\n    """\n    Update an existing incident for a resource (asset)\n    """\n    updateIncidentStatus(\n      """\n      The urn for an existing incident\n      """\n      urn: String!\n\n      """\n      Input required to update the state of an existing incident\n      """\n      input: UpdateIncidentStatusInput!): String\n}\n\n"""\nInput required to update status of an existing incident\n"""\ninput UpdateIncidentStatusInput {\n  """\n  The new state of the incident\n  """\n  state: IncidentState!\n\n  """\n  An optional message associated with the new state\n  """\n  message: String\n}\n')),(0,i.kt)("h3",{id:"examples-2"},"Examples"),(0,i.kt)("p",null,"Imagine that we've fixed our Dataset with urn ",(0,i.kt)("inlineCode",{parentName:"p"},"urn:li:dataset:(abc)")," so that it's passing validation. Now we want to mark the Dataset as healthy, so stakeholders and downstream consumers know it's ready to use."),(0,i.kt)("p",null,"To do so, we need the URN of the Incident that we raised previously."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Request")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'mutation updateIncidentStatus {\n  updateIncidentStatus(urn: "urn:li:incident:bfecab62-dc10-49a6-a305-78ce0cc6e5b1", \n  input: {\n    state: RESOLVED\n    message: "Dataset is now passing validations. Verified by John Joyce on Data Platform eng."\n  })\n}\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "data": {\n    "updateIncidentStatus": "true"\n  }\n}\n')),(0,i.kt)("p",null,"True is returned if the incident's was successfully marked as resolved."),(0,i.kt)("h4",{id:"curl-2"},"CURL"),(0,i.kt)("p",null,"To issue the above GraphQL as a CURL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'curl --location --request POST \'https://your-account.acryl.io/api/graphql\' \\\n--header \'Authorization: Bearer your-access-token\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{"query":"mutation updateIncidentStatus {\\n updateIncidentStatus(urn: "urn:li:incident:bfecab62-dc10-49a6-a305-78ce0cc6e5b1", \\n input: {\\n state: RESOLVED\\n message: "Dataset is now passing validations. Verified by John Joyce on Data Platform eng."\\n })\\n}","variables":{}}\'Python\n')),(0,i.kt)("p",null,"To issue the above GraphQL query in Python (requests):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'import requests\n\ndatahub_session = requests.Session()\n\nheaders = {\n    "Content-Type": "application/json",\n    "Authorization": "Bearer your-personal-access-token",\n}\n\njson = {\n    "query": """mutation updateIncidentStatus {\\n\n                  updateIncidentStatus(urn: \\"urn:li:incident:bfecab62-dc10-49a6-a305-78ce0cc6e5b1\\",\\n\n                  input: {\\n\n                    state: RESOLVED\\n\n                    message: \\"Dataset is now passing validations. Verified by John Joyce on Data Platform eng.\\"\\n\n                  })\\n\n                }""",\n    "variables": {},\n}\n\nresponse = datahub_session.post(f"https://your-account.acryl.io/api/graphql", headers=headers, json=json)\nresponse.raise_for_status()\nres_data = response.json() # Get result as JSON  \n')),(0,i.kt)("h2",{id:"tips"},"Tips"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Authorization")),(0,i.kt)("p",{parentName:"admonition"},"Remember to always provide a DataHub Personal Access Token when calling the GraphQL API. To do so, just add the 'Authorization' header as follows:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"Authorization: Bearer <personal-access-token>\n")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Exploring GraphQL API")),(0,i.kt)("p",{parentName:"admonition"},"Also, remember that you can play with an interactive version of the Acryl GraphQL API at ",(0,i.kt)("inlineCode",{parentName:"p"},"https://your-account-id.acryl.io/api/graphiql"))),(0,i.kt)("h2",{id:"enabling-slack-notifications"},"Enabling Slack Notifications"),(0,i.kt)("p",null,"You can configure Acryl to send slack notifications to a specific channel when incidents are raised or their status is changed."),(0,i.kt)("p",null,"These notifications are also able to tag the immediate asset's owners, along with the owners of downstream assets consuming it."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(45936).Z,width:"1432",height:"804"})),(0,i.kt)("p",null,"To do so, simply follow the ",(0,i.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/managed-datahub/saas-slack-setup"},"Slack Integration Guide")," and contact your Acryl customer success team to enable the feature!"))}p.isMDXComponent=!0},45936:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Screen-Shot-2022-03-22-at-6.46.41-PM-41018c739e400cf6c7f7549fec535f19.png"}}]);