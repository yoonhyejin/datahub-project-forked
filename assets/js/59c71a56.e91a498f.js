"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(d,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(m,s(s({ref:t},l),{},{components:n})):a.createElement(m,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},18174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const o={title:"Adding Owners On Datasets/Columns",slug:"/api/tutorials/adding-ownerships",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/adding-ownerships.md"},s="Adding Owners On Datasets/Columns",i={unversionedId:"docs/api/tutorials/adding-ownerships",id:"docs/api/tutorials/adding-ownerships",title:"Adding Owners On Datasets/Columns",description:"Why Would You Add Owners?",source:"@site/genDocs/docs/api/tutorials/adding-ownerships.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/adding-ownerships",permalink:"/datahub-project-forked/docs/api/tutorials/adding-ownerships",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/adding-ownerships.md",tags:[],version:"current",frontMatter:{title:"Adding Owners On Datasets/Columns",slug:"/api/tutorials/adding-ownerships",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/adding-ownerships.md"},sidebar:"overviewSidebar",previous:{title:"Adding Terms On Datasets/Columns",permalink:"/datahub-project-forked/docs/api/tutorials/adding-terms"},next:{title:"Adding Description on Datasets",permalink:"/datahub-project-forked/docs/api/tutorials/adding-dataset-description"}},d={},p=[{value:"Why Would You Add Owners?",id:"why-would-you-add-owners",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Add Owners With GraphQL",id:"add-owners-with-graphql",level:2},{value:"GraphQL Explorer",id:"graphql-explorer",level:3},{value:"CURL",id:"curl",level:3},{value:"Add Ownerships With Python SDK",id:"add-ownerships-with-python-sdk",level:2},{value:"Expected Outcomes",id:"expected-outcomes",level:2}],l={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adding-owners-on-datasetscolumns"},"Adding Owners On Datasets/Columns"),(0,r.kt)("h2",{id:"why-would-you-add-owners"},"Why Would You Add Owners?"),(0,r.kt)("p",null,"Assigning an owner to an entity helps to establish accountability for the metadata and collaborating as a team.\nIf there are any issues or questions about the data, the designated owner can serve as a reliable point of contact."),(0,r.kt)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,r.kt)("p",null,"This guide will show you how to add user group ",(0,r.kt)("inlineCode",{parentName:"p"},"bfoo")," as an owner to the ",(0,r.kt)("inlineCode",{parentName:"p"},"fct_users_created")," datatset."),(0,r.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,r.kt)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed information, please refer to ",(0,r.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/api/tutorials/references/prepare-datahub"},"Preparing Your Local DataHub Environment"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Before adding owners, you need to ensure the targeted dataset and the owner are already present in your datahub.\nIf you attempt to manipulate entities that do not exist, your operation will fail.\nIn this guide, we will be using data from a sample ingestion.")),(0,r.kt)("h2",{id:"add-owners-with-graphql"},"Add Owners With GraphQL"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Please note that there are two available endpoints (",(0,r.kt)("inlineCode",{parentName:"p"},":8000"),", ",(0,r.kt)("inlineCode",{parentName:"p"},":9002"),") to access GraphQL.\nFor more information about the differences between these endpoints, please refer to ",(0,r.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/metadata-service#graphql-api"},"DataHub Metadata Service"))),(0,r.kt)("h3",{id:"graphql-explorer"},"GraphQL Explorer"),(0,r.kt)("p",null,"GraphQL Explorer is the fastest way to experiment with GraphQL without any dependancies.\nNavigate to GraphQL Explorer (",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9002/api/graphiql"),") and run the following query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'mutation addOwners {\n    addOwner(\n      input: { \n        ownerUrn: "urn:li:corpGroup:bfoo", \n        resourceUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)",\n        ownerEntityType: CORP_GROUP,\n        type: TECHNICAL_OWNER\n            }\n    )\n}\n')),(0,r.kt)("p",null,"Expected Response: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "data": {\n    "addOwner": true\n  },\n  "extensions": {}\n}\n')),(0,r.kt)("h3",{id:"curl"},"CURL"),(0,r.kt)("p",null,"With CURL, you need to provide tokens. To generate a token, please refer to ",(0,r.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/api/tutorials/references/generate-access-token"},"Generate Access Token"),".\nWith ",(0,r.kt)("inlineCode",{parentName:"p"},"accessToken"),", you can run the following command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation addOwners { addOwner(input: { ownerUrn: \\"urn:li:corpGroup:bfoo\\", resourceUrn: \\"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)\\", ownerEntityType: CORP_GROUP, type: TECHNICAL_OWNER }) }", "variables":{}}\'\n')),(0,r.kt)("h2",{id:"add-ownerships-with-python-sdk"},"Add Ownerships With Python SDK"),(0,r.kt)("p",null,"Following codes add an owner named ",(0,r.kt)("inlineCode",{parentName:"p"},"bfoo")," to a hive dataset named ",(0,r.kt)("inlineCode",{parentName:"p"},"fct_users_created"),".\nYou can refer to a full code in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/dataset_add_owner.py"},"dataset_add_column_ownership.py"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# inlined from metadata-ingestion/examples/library/dataset_add_column_ownership.py\nimport logging\nfrom typing import Optional\n\nfrom datahub.emitter.mce_builder import make_dataset_urn, make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\n\n# read-modify-write requires access to the DataHubGraph (RestEmitter is not enough)\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import (\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n)\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n\n# Inputs -> owner, ownership_type, dataset\nowner_to_add = make_user_urn("bfoo")\nownership_type = OwnershipTypeClass.TECHNICAL_OWNER\ndataset_urn = make_dataset_urn(platform="hive", name="fct_users_created", env="PROD")\n\n# Some objects to help with conditional pathways later\nowner_class_to_add = OwnerClass(owner=owner_to_add, type=ownership_type)\nownership_to_add = OwnershipClass(owners=[owner_class_to_add])\n\n\n# First we get the current owners\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\n\ncurrent_owners: Optional[OwnershipClass] = graph.get_aspect(\n    entity_urn=dataset_urn, aspect_type=OwnershipClass\n)\n\n\nneed_write = False\nif current_owners:\n    if (owner_to_add, ownership_type) not in [\n        (x.owner, x.type) for x in current_owners.owners\n    ]:\n        # owners exist, but this owner is not present in the current owners\n        current_owners.owners.append(owner_class_to_add)\n        need_write = True\nelse:\n    # create a brand new ownership aspect\n    current_owners = ownership_to_add\n    need_write = True\n\nif need_write:\n    event: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n        entityUrn=dataset_urn,\n        aspect=current_owners,\n    )\n    graph.emit(event)\n    log.info(\n        f"Owner {owner_to_add}, type {ownership_type} added to dataset {dataset_urn}"\n    )\n\nelse:\n    log.info(f"Owner {owner_to_add} already exists, omitting write")\n')),(0,r.kt)("p",null,"We're using the ",(0,r.kt)("inlineCode",{parentName:"p"},"MetdataChangeProposalWrapper")," to change entities in this example.\nFor more information about the ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataChangeProposal"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/advanced/mcp-mcl"},"MetadataChangeProposal & MetadataChangeLog Events")),(0,r.kt)("p",null,"Expected Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"data":{"addOwner":true},"extensions":{}}\n')),(0,r.kt)("h2",{id:"expected-outcomes"},"Expected Outcomes"),(0,r.kt)("p",null,"You can now see ",(0,r.kt)("inlineCode",{parentName:"p"},"bfoo")," has been added as an owner to the ",(0,r.kt)("inlineCode",{parentName:"p"},"fct_users_created")," dataset."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"ownership-added",src:n(72995).Z,width:"1942",height:"882"})))}u.isMDXComponent=!0},72995:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/owner-added-331b401b44837d3029efd53ff343402a.png"}}]);