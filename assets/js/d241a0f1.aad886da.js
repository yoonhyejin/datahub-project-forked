"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1905],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(a),c=r,h=m["".concat(p,".").concat(c)]||m[c]||d[c]||o;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2726:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(83117),r=(a(67294),a(3905));const o={title:"Working with Metadata Entities",slug:"/api/graphql/querying-entities",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/graphql/querying-entities.md"},i="Working with Metadata Entities",l={unversionedId:"docs/api/graphql/querying-entities",id:"docs/api/graphql/querying-entities",title:"Working with Metadata Entities",description:"Learn how to find, retrieve & update entities comprising your Metadata Graph programmatically.",source:"@site/genDocs/docs/api/graphql/querying-entities.md",sourceDirName:"docs/api/graphql",slug:"/api/graphql/querying-entities",permalink:"/datahub-project-forked/docs/api/graphql/querying-entities",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/graphql/querying-entities.md",tags:[],version:"current",frontMatter:{title:"Working with Metadata Entities",slug:"/api/graphql/querying-entities",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/graphql/querying-entities.md"},sidebar:"overviewSidebar",previous:{title:"Getting Started",permalink:"/datahub-project-forked/docs/api/graphql/getting-started"},next:{title:"Access Token Management",permalink:"/datahub-project-forked/docs/api/graphql/token-management"}},p={},s=[{value:"Reading an Entity: Queries",id:"reading-an-entity-queries",level:2},{value:"Getting a Metadata Entity",id:"getting-a-metadata-entity",level:3},{value:"Querying for Owners of an entity",id:"querying-for-owners-of-an-entity",level:4},{value:"Querying for Tags of an asset",id:"querying-for-tags-of-an-asset",level:4},{value:"Querying for Domain of an asset",id:"querying-for-domain-of-an-asset",level:4},{value:"Querying for Glossary Terms of an asset",id:"querying-for-glossary-terms-of-an-asset",level:4},{value:"Querying for Deprecation of an asset",id:"querying-for-deprecation-of-an-asset",level:4},{value:"Relevant Queries",id:"relevant-queries",level:4},{value:"Searching for a Metadata Entity",id:"searching-for-a-metadata-entity",level:3},{value:"Relevant Queries",id:"relevant-queries-1",level:4},{value:"Modifying an Entity: Mutations",id:"modifying-an-entity-mutations",level:2},{value:"Authorization",id:"authorization",level:3},{value:"Updating a Metadata Entity",id:"updating-a-metadata-entity",level:3},{value:"Relevant Mutations",id:"relevant-mutations",level:4},{value:"Adding &amp; Removing Tags",id:"adding--removing-tags",level:3},{value:"Relevant Mutations",id:"relevant-mutations-1",level:4},{value:"Adding &amp; Removing Glossary Terms",id:"adding--removing-glossary-terms",level:3},{value:"Relevant Mutations",id:"relevant-mutations-2",level:4},{value:"Adding &amp; Removing Domain",id:"adding--removing-domain",level:3},{value:"Relevant Mutations",id:"relevant-mutations-3",level:4},{value:"Adding &amp; Removing Owners",id:"adding--removing-owners",level:3},{value:"Relevant Mutations",id:"relevant-mutations-4",level:4},{value:"Updating Deprecation",id:"updating-deprecation",level:3},{value:"Relevant Mutations",id:"relevant-mutations-5",level:4},{value:"Editing Description (i.e. Documentation)",id:"editing-description-ie-documentation",level:3},{value:"Relevant Mutations",id:"relevant-mutations-6",level:4},{value:"Soft Deleting",id:"soft-deleting",level:3},{value:"Relevant Mutations",id:"relevant-mutations-7",level:4},{value:"Handling Errors",id:"handling-errors",level:2},{value:"Feedback, Feature Requests, &amp; Support",id:"feedback-feature-requests--support",level:2}],u={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"working-with-metadata-entities"},"Working with Metadata Entities"),(0,r.kt)("p",null,"Learn how to find, retrieve & update entities comprising your Metadata Graph programmatically."),(0,r.kt)("h2",{id:"reading-an-entity-queries"},"Reading an Entity: Queries"),(0,r.kt)("p",null,"DataHub provides the following GraphQL queries for retrieving entities in your Metadata Graph. "),(0,r.kt)("h3",{id:"getting-a-metadata-entity"},"Getting a Metadata Entity"),(0,r.kt)("p",null,"To retrieve a Metadata Entity by primary key (urn), simply use the ",(0,r.kt)("inlineCode",{parentName:"p"},"<entityName>(urn: String!)")," GraphQL Query. "),(0,r.kt)("p",null,"For example, to retrieve a ",(0,r.kt)("inlineCode",{parentName:"p"},"dataset")," entity, you can issue the following GraphQL Query:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)") {\n    urn\n    properties {\n        name\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},"curl --location --request POST 'http://localhost:8080/api/graphql' \\\n--header 'Authorization: Bearer <my-access-token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"query\":\"{ dataset(urn: \\\"urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)\\\") { urn properties { name } } }\", \"variables\":{}}'\n")),(0,r.kt)("p",null,"In the following examples, we'll look at how to fetch specific types of metadata for an asset. "),(0,r.kt)("h4",{id:"querying-for-owners-of-an-entity"},"Querying for Owners of an entity"),(0,r.kt)("p",null,"As GraphQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)") {\n    ownership {\n      owners {\n        owner {\n          ... on CorpUser {\n            urn\n            type\n          }\n          ... on CorpGroup {\n            urn\n            type\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"querying-for-tags-of-an-asset"},"Querying for Tags of an asset"),(0,r.kt)("p",null,"As GraphQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)") {\n    tags {\n      tags {\n        tag {\n          name\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"querying-for-domain-of-an-asset"},"Querying for Domain of an asset"),(0,r.kt)("p",null,"As GraphQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)") {\n    domain {\n      domain {\n        urn\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"querying-for-glossary-terms-of-an-asset"},"Querying for Glossary Terms of an asset"),(0,r.kt)("p",null,"As GraphQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)") {\n    glossaryTerms {\n      terms {\n        term {\n          urn\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"querying-for-deprecation-of-an-asset"},"Querying for Deprecation of an asset"),(0,r.kt)("p",null,"As GraphQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)") {\n    deprecation {\n      deprecated\n      decommissionTime\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"relevant-queries"},"Relevant Queries"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#dataset"},"dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#container"},"container")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#dashboard"},"dashboard")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#chart"},"chart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#dataflow"},"dataFlow")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#datajob"},"dataJob")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#domain"},"domain")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#glossaryterm"},"glossaryTerm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#glossarynode"},"glossaryNode")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#tag"},"tag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#notebook"},"notebook")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#corpuser"},"corpUser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#corpgroup"},"corpGroup"))),(0,r.kt)("h3",{id:"searching-for-a-metadata-entity"},"Searching for a Metadata Entity"),(0,r.kt)("p",null,"To perform full-text search against an Entity of a particular type, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"search(input: SearchInput!)")," GraphQL Query."),(0,r.kt)("p",null,"As GraphQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  search(input: { type: DATASET, query: "my sql dataset", start: 0, count: 10 }) {\n    start\n    count\n    total\n    searchResults {\n      entity {\n         urn\n         type\n         ...on Dataset {\n            name\n         }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"As CURL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},"curl --location --request POST 'http://localhost:8080/api/graphql' \\\n--header 'Authorization: Bearer <my-access-token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"query\":\"{ search(input: { type: DATASET, query: \\\"my sql dataset\\\", start: 0, count: 10 }) { start count total searchResults { entity { urn type ...on Dataset { name } } } } }\", \"variables\":{}}'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note")," that by default Elasticsearch only allows pagination through 10,000 entities via the search API.\nIf you need to paginate through more, you can change the default value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.max_result_window")," setting in Elasticsearch,\nor using the ",(0,r.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/scroll-api.html"},"scroll API")," to read from the index directly. ")),(0,r.kt)("h4",{id:"relevant-queries-1"},"Relevant Queries"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#search"},"search")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#searchacrossentities"},"searchAcrossEntities")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#searchacrosslineage"},"searchAcrossLineage")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#browse"},"browse")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/queries#browsepaths"},"browsePaths"))),(0,r.kt)("h2",{id:"modifying-an-entity-mutations"},"Modifying an Entity: Mutations"),(0,r.kt)("h3",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,"Mutations which change Entity metadata are subject to ",(0,r.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/authorization/policies"},"DataHub Access Policies"),". This means that DataHub's server\nwill check whether the requesting actor is authorized to perform the action. "),(0,r.kt)("h3",{id:"updating-a-metadata-entity"},"Updating a Metadata Entity"),(0,r.kt)("p",null,"To update an existing Metadata Entity, simply use the ",(0,r.kt)("inlineCode",{parentName:"p"},"update<entityName>(urn: String!, input: EntityUpdateInput!)")," GraphQL Query."),(0,r.kt)("p",null,"For example, to update a Dashboard entity, you can issue the following GraphQL mutation:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation updateDashboard {\n    updateDashboard(\n        urn: "urn:li:dashboard:(looker,baz)",\n        input: {\n            editableProperties: {\n                description: "My new desription"\n            }\n        }\n    ) {\n        urn\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation updateDashboard { updateDashboard(urn:\\"urn:li:dashboard:(looker,baz)\\", input: { editableProperties: { description: \\"My new desription\\" } } ) { urn } }", "variables":{}}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Be careful"),": these APIs allow you to make significant changes to a Metadata Entity, often including\nupdating the entire set of Owners & Tags. "),(0,r.kt)("h4",{id:"relevant-mutations"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatedataset"},"updateDataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatechart"},"updateChart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatedashboard"},"updateDashboard")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatedataFlow"},"updateDataFlow")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatedataJob"},"updateDataJob")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatenotebook"},"updateNotebook"))),(0,r.kt)("h3",{id:"adding--removing-tags"},"Adding & Removing Tags"),(0,r.kt)("p",null,"To attach Tags to a Metadata Entity, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"addTags")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"batchAddTags")," mutations.\nTo remove them, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeTag")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"batchRemoveTags")," mutations. "),(0,r.kt)("p",null,"For example, to add a Tag a Pipeline entity, you can issue the following GraphQL mutation: "),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation addTags {\n    addTags(input: { tagUrns: ["urn:li:tag:NewTag"], resourceUrn: "urn:li:dataFlow:(airflow,dag_abc,PROD)" })\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation addTags { addTags(input: { tagUrns: [\\"urn:li:tag:NewTag\\"], resourceUrn: \\"urn:li:dataFlow:(airflow,dag_abc,PROD)\\" }) }", "variables":{}}\'\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Pro-Tip"),"! You can also add or remove Tags from Dataset Schema Fields (or ",(0,r.kt)("em",{parentName:"p"},"Columns"),") by\nproviding 2 additional fields in your Query input:"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"subResourceType "),(0,r.kt)("li",{parentName:"ul"},"subResource")),(0,r.kt)("p",{parentName:"blockquote"},"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"subResourceType")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"DATASET_FIELD")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"subResource")," is the field path of the column\nto change.")),(0,r.kt)("h4",{id:"relevant-mutations-1"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#addtags"},"addTags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchaddtags"},"batchAddTags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#removetag"},"removeTag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchremovetags"},"batchRemoveTags"))),(0,r.kt)("h3",{id:"adding--removing-glossary-terms"},"Adding & Removing Glossary Terms"),(0,r.kt)("p",null,"To attach Glossary Terms to a Metadata Entity, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"addTerms")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"batchAddTerms")," mutations.\nTo remove them, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeTerm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"batchRemoveTerms")," mutations."),(0,r.kt)("p",null,"For example, to add a Glossary Term a Pipeline entity, you could issue the following GraphQL mutation:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation addTerms {\n    addTerms(input: { termUrns: ["urn:li:glossaryTerm:NewTerm"], resourceUrn: "urn:li:dataFlow:(airflow,dag_abc,PROD)" })\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation addTerms { addTerms(input: { termUrns: [\\"urn:li:glossaryTerm:NewTerm\\"], resourceUrn: \\"urn:li:dataFlow:(airflow,dag_abc,PROD)\\" }) }", "variables":{}}\'\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Pro-Tip"),"! You can also add or remove Glossary Terms from Dataset Schema Fields (or ",(0,r.kt)("em",{parentName:"p"},"Columns"),") by\nproviding 2 additional fields in your Query input:"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"subResourceType"),(0,r.kt)("li",{parentName:"ul"},"subResource")),(0,r.kt)("p",{parentName:"blockquote"},"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"subResourceType")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"DATASET_FIELD")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"subResource")," is the field path of the column\nto change.")),(0,r.kt)("h4",{id:"relevant-mutations-2"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#addterms"},"addTerms")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchaddterms"},"batchAddTerms")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#removeterm"},"removeTerm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchremoveterms"},"batchRemoveTerms"))),(0,r.kt)("h3",{id:"adding--removing-domain"},"Adding & Removing Domain"),(0,r.kt)("p",null,"To add an entity to a Domain, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"setDomain")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"batchSetDomain")," mutations.\nTo remove entities from a Domain, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"unsetDomain")," mutation or the ",(0,r.kt)("inlineCode",{parentName:"p"},"batchSetDomain")," mutation."),(0,r.kt)("p",null,'For example, to add a Pipeline entity to the "Marketing" Domain, you can issue the following GraphQL mutation:'),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation setDomain {\n    setDomain(domainUrn: "urn:li:domain:Marketing", entityUrn: "urn:li:dataFlow:(airflow,dag_abc,PROD)")\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation setDomain { setDomain(domainUrn: \\"urn:li:domain:Marketing\\", entityUrn: \\"urn:li:dataFlow:(airflow,dag_abc,PROD)\\") }", "variables":{}}\'\n')),(0,r.kt)("h4",{id:"relevant-mutations-3"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#setdomain"},"setDomain")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchsetdomain"},"batchSetDomain")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#unsetdomain"},"unsetDomain"))),(0,r.kt)("h3",{id:"adding--removing-owners"},"Adding & Removing Owners"),(0,r.kt)("p",null,"To attach Owners to a Metadata Entity, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"addOwners")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"batchAddOwners")," mutations.\nTo remove them, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeOwner")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"batchRemoveOwners")," mutations."),(0,r.kt)("p",null,"For example, to add an Owner a Pipeline entity, you can issue the following GraphQL mutation:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation addOwners {\n    addOwners(input: { owners: [ { ownerUrn: "urn:li:corpuser:datahub", ownerEntityType: CORP_USER, type: TECHNICAL_OWNER } ], resourceUrn: "urn:li:dataFlow:(airflow,dag_abc,PROD)" })\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation addOwners { addOwners(input: { owners: [ { ownerUrn: \\"urn:li:corpuser:datahub\\", ownerEntityType: CORP_USER, type: TECHNICAL_OWNER } ], resourceUrn: \\"urn:li:dataFlow:(airflow,dag_abc,PROD)\\" }) }", "variables":{}}\'\n')),(0,r.kt)("h4",{id:"relevant-mutations-4"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#addowners"},"addOwners")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchaddowners"},"batchAddOwners")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#removeowner"},"removeOwner")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchremoveowners"},"batchRemoveOwners"))),(0,r.kt)("h3",{id:"updating-deprecation"},"Updating Deprecation"),(0,r.kt)("p",null,"To update deprecation for a Metadata Entity, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"updateDeprecation")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"batchUpdateDeprecation")," mutations."),(0,r.kt)("p",null,"For example, to mark a Pipeline entity as deprecated, you can issue the following GraphQL mutation:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation updateDeprecation {\n    updateDeprecation(input: { urn: "urn:li:dataFlow:(airflow,dag_abc,PROD)", deprecated: true })\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},"curl --location --request POST 'http://localhost:8080/api/graphql' \\\n--header 'Authorization: Bearer <my-access-token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"query\": \"mutation updateDeprecation { updateDeprecation(input: { urn: \\\"urn:li:dataFlow:(airflow,dag_abc,PROD)\\\", deprecated: true }) }\", \"variables\":{}}'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note")," that deprecation is NOT currently supported for assets of type ",(0,r.kt)("inlineCode",{parentName:"p"},"container"),". ")),(0,r.kt)("h4",{id:"relevant-mutations-5"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatedeprecation"},"updateDeprecation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchupdatedeprecation"},"batchUpdateDeprecation"))),(0,r.kt)("h3",{id:"editing-description-ie-documentation"},"Editing Description (i.e. Documentation)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Notice that this API is currently evolving and in an experimental state. It supports the following entities today:"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"dataset"),(0,r.kt)("li",{parentName:"ul"},"container"),(0,r.kt)("li",{parentName:"ul"},"domain"),(0,r.kt)("li",{parentName:"ul"},"glossary term"),(0,r.kt)("li",{parentName:"ul"},"glossary node"),(0,r.kt)("li",{parentName:"ul"},"tag"),(0,r.kt)("li",{parentName:"ul"},"group "),(0,r.kt)("li",{parentName:"ul"},"notebook"),(0,r.kt)("li",{parentName:"ul"},"all ML entities"))),(0,r.kt)("p",null,"To edit the documentation for an entity, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"updateDescription")," mutation. ",(0,r.kt)("inlineCode",{parentName:"p"},"updateDescription")," currently supports Dataset Schema Fields, Containers. "),(0,r.kt)("p",null,"For example, to edit the documentation for a Pipeline, you can issue the following GraphQL mutation:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation updateDescription {\n  updateDescription(\n    input: {\n      description: "Name of the user who was deleted. This description is updated via GrpahQL.",\n      resourceUrn:"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)",\n      subResource: "user_name",\n      subResourceType:DATASET_FIELD\n    }\n  )\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation updateDescription { updateDescription ( input: { description: \\"Name of the user who was deleted. This description is updated via GrpahQL.\\", resourceUrn: \\"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)\\", subResource: \\"user_name\\", subResourceType:DATASET_FIELD }) }", "variables":{}}\'\n')),(0,r.kt)("h4",{id:"relevant-mutations-6"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#updatedescription"},"updateDescription"))),(0,r.kt)("h3",{id:"soft-deleting"},"Soft Deleting"),(0,r.kt)("p",null,"DataHub allows you to soft-delete entities. This will effectively hide them from the search,\nbrowse, and lineage experiences."),(0,r.kt)("p",null,"To mark an entity as soft-deleted, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"batchUpdateSoftDeleted")," mutation."),(0,r.kt)("p",null,"For example, to mark a Pipeline as soft deleted, you can issue the following GraphQL mutation:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As GraphQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation batchUpdateSoftDeleted {\n    batchUpdateSoftDeleted(input: { : urns: ["urn:li:dataFlow:(airflow,dag_abc,PROD)"], deleted: true })\n}\n')),(0,r.kt)("p",null,"Similarly, you can \"un delete\" an entity by setting deleted to 'false'. "),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"As CURL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},"curl --location --request POST 'http://localhost:8080/api/graphql' \\\n--header 'Authorization: Bearer <my-access-token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"query\": \"mutation batchUpdateSoftDeleted { batchUpdateSoftDeleted(input: { deleted: true, urns: [\\\"urn:li:dataFlow:(airflow,dag_abc,PROD)\\\"] }) }\", \"variables\":{}}'\n")),(0,r.kt)("h4",{id:"relevant-mutations-7"},"Relevant Mutations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/datahub-project-forked/docs/graphql/mutations#batchupdatesoftdeleted"},"batchUpdateSoftDeleted"))),(0,r.kt)("h2",{id:"handling-errors"},"Handling Errors"),(0,r.kt)("p",null,"In GraphQL, requests that have errors do not always result in a non-200 HTTP response body. Instead, errors will be\npresent in the response body inside a top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"errors")," field. "),(0,r.kt)("p",null,"This enables situations in which the client is able to deal gracefully will partial data returned by the application server.\nTo verify that no error has returned after making a GraphQL request, make sure you check ",(0,r.kt)("em",{parentName:"p"},"both")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"errors")," fields that are returned. "),(0,r.kt)("p",null,"To catch a GraphQL error, simply check the ",(0,r.kt)("inlineCode",{parentName:"p"},"errors")," field side the GraphQL response. It will contain a message, a path, and a set of extensions\nwhich contain a standard error code. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "errors":[\n      {\n         "message":"Failed to change ownership for resource urn:li:dataFlow:(airflow,dag_abc,PROD). Expected a corp user urn.",\n         "locations":[\n            {\n               "line":1,\n               "column":22\n            }\n         ],\n         "path":[\n            "addOwners"\n         ],\n         "extensions":{\n            "code":400,\n            "type":"BAD_REQUEST",\n            "classification":"DataFetchingException"\n         }\n      }\n   ]\n}\n')),(0,r.kt)("p",null,"With the following error codes officially supported:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Code"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"400"),(0,r.kt)("td",{parentName:"tr",align:null},"BAD_REQUEST"),(0,r.kt)("td",{parentName:"tr",align:null},"The query or mutation was malformed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"403"),(0,r.kt)("td",{parentName:"tr",align:null},"UNAUTHORIZED"),(0,r.kt)("td",{parentName:"tr",align:null},"The current actor is not authorized to perform the requested action.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"404"),(0,r.kt)("td",{parentName:"tr",align:null},"NOT_FOUND"),(0,r.kt)("td",{parentName:"tr",align:null},"The resource is not found.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"500"),(0,r.kt)("td",{parentName:"tr",align:null},"SERVER_ERROR"),(0,r.kt)("td",{parentName:"tr",align:null},"An internal error has occurred. Check your server logs or contact your DataHub administrator.")))),(0,r.kt)("h2",{id:"feedback-feature-requests--support"},"Feedback, Feature Requests, & Support"),(0,r.kt)("p",null,"Visit our ",(0,r.kt)("a",{parentName:"p",href:"https://slack.datahubproject.io"},"Slack channel")," to ask questions, tell us what we can do better, & make requests for what you'd like to see in the future. Or just\nstop by to say 'Hi'."))}d.isMDXComponent=!0}}]);