"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7285],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(a),c=r,g=m["".concat(s,".").concat(c)]||m[c]||p[c]||l;return a?n.createElement(g,i(i({ref:t},u),{},{components:a})):n.createElement(g,i({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},18679:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},34259:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(83117),r=a(67294),l=a(86010),i=a(51048),o=a(33609),s=a(1943),d=a(72957);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){const{lazy:t,block:a,defaultValue:i,values:m,groupId:c,className:g}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),h=(0,o.l)(b,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===i?i:i??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==N&&!b.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:y}=(0,s.U)(),[v,T]=(0,r.useState)(N),w=[],{blockElementScrollPositionUntilNextRender:_}=(0,d.o5)();if(null!=c){const e=f[c];null!=e&&e!==v&&b.some((t=>t.value===e))&&T(e)}const j=e=>{const t=e.currentTarget,a=w.indexOf(t),n=b[a].value;n!==v&&(_(t),T(n),null!=c&&y(c,String(n)))},P=e=>{let t=null;switch(e.key){case"Enter":j(e);break;case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]??w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]??w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},g)},b.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>w.push(e),onKeyDown:P,onClick:j},i,{className:(0,l.Z)("tabs__item",p,i?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,r.cloneElement)(k.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function c(e){const t=(0,i.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},84577:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var n=a(83117),r=(a(67294),a(3905)),l=a(34259),i=a(18679);const o={sidebar_position:48,title:"Tableau",slug:"/generated/ingestion/sources/tableau",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/tableau.md"},s="Tableau",d={unversionedId:"docs/generated/ingestion/sources/tableau",id:"docs/generated/ingestion/sources/tableau",title:"Tableau",description:"Module tableau",source:"@site/genDocs/docs/generated/ingestion/sources/tableau.md",sourceDirName:"docs/generated/ingestion/sources",slug:"/generated/ingestion/sources/tableau",permalink:"/datahub-project-forked/docs/generated/ingestion/sources/tableau",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/tableau.md",tags:[],version:"current",sidebarPosition:48,frontMatter:{sidebar_position:48,title:"Tableau",slug:"/generated/ingestion/sources/tableau",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/tableau.md"},sidebar:"overviewSidebar",previous:{title:"Superset",permalink:"/datahub-project-forked/docs/generated/ingestion/sources/superset"},next:{title:"Trino",permalink:"/datahub-project-forked/docs/generated/ingestion/sources/trino"}},u={},p=[{value:"Module <code>tableau</code>",id:"module-tableau",level:2},{value:"Important Capabilities",id:"important-capabilities",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Ingestion through UI",id:"ingestion-through-ui",level:3},{value:"Integration Details",id:"integration-details",level:3},{value:"Concept Mapping",id:"concept-mapping",level:4},{value:"Lineage",id:"lineage",level:4},{value:"Caveats",id:"caveats",level:4},{value:"Troubleshooting",id:"troubleshooting",level:3},{value:"Why are only some workbooks/custom SQLs/published datasources ingested from the specified project?",id:"why-are-only-some-workbookscustom-sqlspublished-datasources-ingested-from-the-specified-project",level:3},{value:"CLI based Ingestion",id:"cli-based-ingestion",level:3},{value:"Install the Plugin",id:"install-the-plugin",level:4},{value:"Starter Recipe",id:"starter-recipe",level:3},{value:"Config Details",id:"config-details",level:3},{value:"Code Coordinates",id:"code-coordinates",level:3},{value:"Questions",id:"questions",level:2}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tableau"},"Tableau"),(0,r.kt)("h2",{id:"module-tableau"},"Module ",(0,r.kt)("inlineCode",{parentName:"h2"},"tableau")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-incubating-blue",alt:"Incubating"})),(0,r.kt)("h3",{id:"important-capabilities"},"Important Capabilities"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Capability"),(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dataset Usage"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Dashboard/Chart view counts, enabled using extract_usage_stats config")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Descriptions"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/metadata-ingestion/docs/dev_guides/stateful#stale-entity-removal"},"Detect Deleted Entities")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default when stateful ingestion is turned on.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/domains"},"Domains")),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"Requires transformer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Extract Ownership"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Requires recipe configuration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Extract Tags"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Requires recipe configuration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/platform-instances"},"Platform Instance")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Table-Level Lineage"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default")))),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"In order to ingest metadata from Tableau, you will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tableau Server Version 2021.1.10 and above. It may also work for older versions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_start.html#enable-the-tableau-metadata-api-for-tableau-server"},"Enable the Tableau Metadata API")," for Tableau Server, if its not already enabled."),(0,r.kt)("li",{parentName:"ul"},"Tableau Credentials (Username/Password or ",(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/pro/desktop/en-us/useracct.htm#create-and-revoke-personal-access-tokens"},"Personal Access Token"),")"),(0,r.kt)("li",{parentName:"ul"},"The user or token must have ",(0,r.kt)("strong",{parentName:"li"},"Site Administrator Explorer")," permissions.")),(0,r.kt)("h3",{id:"ingestion-through-ui"},"Ingestion through UI"),(0,r.kt)("p",null,"The following video shows you how to get started with ingesting Tableau metadata through the UI."),(0,r.kt)("div",{style:{position:"relative",paddingBottom:"57.692307692307686%",height:0}},(0,r.kt)("iframe",{src:"https://www.loom.com/embed/ef521c4e66564614a6ddde35dc3840f8",frameBorder:0,webkitallowfullscreen:"",mozallowfullscreen:"",allowFullScreen:"",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"}})),(0,r.kt)("h3",{id:"integration-details"},"Integration Details"),(0,r.kt)("p",null,"This plugin extracts Sheets, Dashboards, Embedded and Published Data sources metadata within Workbooks in a given project\non a Tableau site. Tableau's GraphQL interface is used to extract metadata information. Queries used to extract metadata are located\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata-ingestion/src/datahub/ingestion/source/tableau_common.py")),(0,r.kt)("h4",{id:"concept-mapping"},"Concept Mapping"),(0,r.kt)("p",null,"This ingestion source maps the following Source System Concepts to DataHub Concepts:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Source Concept"),(0,r.kt)("th",{parentName:"tr",align:null},"DataHub Concept"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"Tableau"')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/dataplatform"},"Data Platform")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Project"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/container"},"Container")),(0,r.kt)("td",{parentName:"tr",align:null},"SubType ",(0,r.kt)("inlineCode",{parentName:"td"},'"Project"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Embedded DataSource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null},"SubType ",(0,r.kt)("inlineCode",{parentName:"td"},'"Embedded Data Source"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Published DataSource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null},"SubType ",(0,r.kt)("inlineCode",{parentName:"td"},'"Published Data Source"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Custom SQL Table"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null},"SubTypes ",(0,r.kt)("inlineCode",{parentName:"td"},'"View"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"Custom SQL"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Embedded or External Tables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sheet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/chart"},"Chart")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dashboard"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/dashboard"},"Dashboard")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"User"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/corpuser"},"User (a.k.a CorpUser)")),(0,r.kt)("td",{parentName:"tr",align:null},"Optionally Extracted")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Workbook"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/container"},"Container")),(0,r.kt)("td",{parentName:"tr",align:null},"SubType ",(0,r.kt)("inlineCode",{parentName:"td"},'"Workbook"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tag"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/datahub-project-forked/docs/generated/metamodel/entities/tag"},"Tag")),(0,r.kt)("td",{parentName:"tr",align:null},"Optionally Extracted")))),(0,r.kt)("h4",{id:"lineage"},"Lineage"),(0,r.kt)("p",null,"Lineage is emitted as received from Tableau's metadata API for"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sheets contained within a Dashboard"),(0,r.kt)("li",{parentName:"ul"},"Embedded or Published Data Sources depended on by a Sheet"),(0,r.kt)("li",{parentName:"ul"},"Published Data Sources upstream to Embedded datasource"),(0,r.kt)("li",{parentName:"ul"},"Tables upstream to Embedded or Published Data Source"),(0,r.kt)("li",{parentName:"ul"},"Custom SQL datasources upstream to Embedded or Published Data Source"),(0,r.kt)("li",{parentName:"ul"},"Tables upstream to Custom SQL Data Source")),(0,r.kt)("h4",{id:"caveats"},"Caveats"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tableau metadata API might return incorrect schema name for tables for some databases, leading to incorrect metadata in DataHub. This source attempts to extract correct schema from databaseTable's fully qualified name, wherever possible. Read ",(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute"},"Using the databaseTable object in query")," for caveats in using schema attribute.")),(0,r.kt)("h3",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h3",{id:"why-are-only-some-workbookscustom-sqlspublished-datasources-ingested-from-the-specified-project"},"Why are only some workbooks/custom SQLs/published datasources ingested from the specified project?"),(0,r.kt)("p",null,'This may happen when the Tableau API returns NODE_LIMIT_EXCEEDED error in response to metadata query and returns partial results with message "Showing partial results. , The request exceeded the \u2018n\u2019 node limit. Use pagination, additional filtering, or both in the query to adjust results." To resolve this, consider'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"reducing the page size using the ",(0,r.kt)("inlineCode",{parentName:"li"},"page_size")," config param in datahub recipe (Defaults to 10)."),(0,r.kt)("li",{parentName:"ul"},"increasing tableau configuration ",(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/server/en-us/cli_configuration-set_tsm.htm#metadata_nodelimit"},"metadata query node limit")," to higher value.")),(0,r.kt)("h3",{id:"cli-based-ingestion"},"CLI based Ingestion"),(0,r.kt)("h4",{id:"install-the-plugin"},"Install the Plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[tableau]'\n")),(0,r.kt)("h3",{id:"starter-recipe"},"Starter Recipe"),(0,r.kt)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,r.kt)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,r.kt)("p",null,"For general pointers on writing and running a recipe, see our ",(0,r.kt)("a",{parentName:"p",href:"/datahub-project-forked/docs/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: tableau\n  config:\n    # Coordinates\n    connect_uri: https://prod-ca-a.online.tableau.com\n    site: acryl\n    platform_instance: acryl_instance\n    project_pattern: ["^default$", "^Project 2$", "^/Project A/Nested Project B$"]\n\n    # Credentials\n    username: "${TABLEAU_USER}"\n    password: "${TABLEAU_PASSWORD}"\n\n    # Options\n    ingest_tags: True\n    ingest_owner: True\n    default_schema_map:\n      mydatabase: public\n      anotherdatabase: anotherschema\n\nsink:\n  # sink configs\n')),(0,r.kt)("h3",{id:"config-details"},"Config Details"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Note that a ",(0,r.kt)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,"View All Configuration Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field ","[Required]"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"connect_uri ","[\u2705]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau host URL."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[type=Default Schema Map]",".default_schema_map"),(0,r.kt)("td",{parentName:"tr",align:null},"Default Schema Map"),(0,r.kt)("td",{parentName:"tr",align:null},"Default schema to use when schema is not found."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extract_column_level_lineage"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"When enabled, extracts column-level lineage from Tableau Datasources"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extract_project_hierarchy"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to extract entire project hierarchy for nested projects."),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extract_usage_stats"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"[experimental]"," Extract usage statistics for dashboards and charts."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ingest_embed_url"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Ingest a URL to render an embedded Preview of assets within Tableau."),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ingest_owner"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Ingest Owner from source. This will override Owner info entered from UI"),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ingest_tables_external"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Ingest details for tables external to (not embedded in) tableau as entities."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ingest_tags"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Ingest Tags from source. This will override Tags entered from UI"),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"page_size"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"[advanced]"," Number of metadata objects (e.g. CustomSQLTable, PublishedDatasource, etc) to query at a time using the Tableau API."),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"password"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau password, must be set if authenticating using username/password."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"platform_instance"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The instance of the platform that all assets produced by this recipe belong to"),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"platform_instance_map"),(0,r.kt)("td",{parentName:"tr",align:null},"map(str,string)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"project_path_separator"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The separator used for the project_pattern field between project names. By default, we use a slash. You can change this if your Tableau projects contain slashes in their names, and you'd like to filter by project."),(0,r.kt)("td",{parentName:"tr",align:null},"/"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"projects"),(0,r.kt)("td",{parentName:"tr",align:null},"array(string)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"site"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau Site. Always required for Tableau Online. Use emptystring to connect with Default site on Tableau Server."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ssl_verify"),(0,r.kt)("td",{parentName:"tr",align:null},"UnionType (See notes for variants)"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to verify SSL certificates. If using self-signed certificates, set to false or provide the path to the .pem certificate bundle."),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"One of boolean,string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"token_name"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau token name, must be set if authenticating using a personal access token."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"token_value"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau token value, must be set if authenticating using a personal access token."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"username"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau username, must be set if authenticating using username/password."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"workbook_page_size"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"[advanced]"," Number of workbooks to query at a time using the Tableau API."),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"env"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Environment to use in namespace when constructing URNs."),(0,r.kt)("td",{parentName:"tr",align:null},"PROD"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lineage_overrides"),(0,r.kt)("td",{parentName:"tr",align:null},"TableauLineageOverrides"),(0,r.kt)("td",{parentName:"tr",align:null},"Mappings to change generated dataset urns. Use only if you really know what you are doing."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lineage_overrides.platform_override_map"),(0,r.kt)("td",{parentName:"tr",align:null},"map(str,string)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"project_pattern"),(0,r.kt)("td",{parentName:"tr",align:null},"AllowDenyPattern"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter for specific Tableau projects. For example, use 'My Project' to ingest a root-level Project with name 'My Project', or 'My Project/Nested Project' to ingest a nested Project with name 'Nested Project'. By default, all Projects nested inside a matching Project will be included in ingestion. You can both allow and deny projects based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. By default, all projects will be ingested."),(0,r.kt)("td",{parentName:"tr",align:null},"{'allow': ","['.*']",", 'deny': [], 'ignoreCase': True}"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"project_pattern.allow"),(0,r.kt)("td",{parentName:"tr",align:null},"array(string)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"project_pattern.deny"),(0,r.kt)("td",{parentName:"tr",align:null},"array(string)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"project_pattern.ignoreCase"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to ignore case sensitivity during pattern matching."),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion"),(0,r.kt)("td",{parentName:"tr",align:null},"StatefulStaleMetadataRemovalConfig"),(0,r.kt)("td",{parentName:"tr",align:null},"Base specialized config for Stateful Ingestion with stale metadata removal capability."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of the ingestion state provider registered with datahub."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.ignore_new_state"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to True, ignores the current checkpoint state."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.ignore_old_state"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to True, ignores the previous checkpoint state."),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.remove_stale_metadata"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled."),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null})))))),(0,r.kt)(i.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "title": "TableauConfig",\n  "description": "Any non-Dataset source that produces lineage to Datasets should inherit this class.\\ne.g. Orchestrators, Pipelines, BI Tools etc.",\n  "type": "object",\n  "properties": {\n    "connect_uri": {\n      "title": "Connect Uri",\n      "description": "Tableau host URL.",\n      "type": "string"\n    },\n    "username": {\n      "title": "Username",\n      "description": "Tableau username, must be set if authenticating using username/password.",\n      "type": "string"\n    },\n    "password": {\n      "title": "Password",\n      "description": "Tableau password, must be set if authenticating using username/password.",\n      "type": "string"\n    },\n    "token_name": {\n      "title": "Token Name",\n      "description": "Tableau token name, must be set if authenticating using a personal access token.",\n      "type": "string"\n    },\n    "token_value": {\n      "title": "Token Value",\n      "description": "Tableau token value, must be set if authenticating using a personal access token.",\n      "type": "string"\n    },\n    "site": {\n      "title": "Site",\n      "description": "Tableau Site. Always required for Tableau Online. Use emptystring to connect with Default site on Tableau Server.",\n      "default": "",\n      "type": "string"\n    },\n    "platform_instance": {\n      "title": "Platform Instance",\n      "description": "The instance of the platform that all assets produced by this recipe belong to",\n      "type": "string"\n    },\n    "ssl_verify": {\n      "title": "Ssl Verify",\n      "description": "Whether to verify SSL certificates. If using self-signed certificates, set to false or provide the path to the .pem certificate bundle.",\n      "default": true,\n      "anyOf": [\n        {\n          "type": "boolean"\n        },\n        {\n          "type": "string"\n        }\n      ]\n    },\n    "extract_column_level_lineage": {\n      "title": "Extract Column Level Lineage",\n      "description": "When enabled, extracts column-level lineage from Tableau Datasources",\n      "default": true,\n      "type": "boolean"\n    },\n    "env": {\n      "title": "Env",\n      "description": "Environment to use in namespace when constructing URNs.",\n      "default": "PROD",\n      "type": "string"\n    },\n    "stateful_ingestion": {\n      "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"\n    },\n    "platform_instance_map": {\n      "title": "Platform Instance Map",\n      "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",\n      "type": "object",\n      "additionalProperties": {\n        "type": "string"\n      }\n    },\n    "projects": {\n      "title": "Projects",\n      "description": "[deprecated] Use project_pattern instead. List of tableau projects ",\n      "default": [\n        "default"\n      ],\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    },\n    "project_pattern": {\n      "title": "Project Pattern",\n      "description": "Filter for specific Tableau projects. For example, use \'My Project\' to ingest a root-level Project with name \'My Project\', or \'My Project/Nested Project\' to ingest a nested Project with name \'Nested Project\'. By default, all Projects nested inside a matching Project will be included in ingestion. You can both allow and deny projects based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. By default, all projects will be ingested.",\n      "default": {\n        "allow": [\n          ".*"\n        ],\n        "deny": [],\n        "ignoreCase": true\n      },\n      "allOf": [\n        {\n          "$ref": "#/definitions/AllowDenyPattern"\n        }\n      ]\n    },\n    "project_path_separator": {\n      "title": "Project Path Separator",\n      "description": "The separator used for the project_pattern field between project names. By default, we use a slash. You can change this if your Tableau projects contain slashes in their names, and you\'d like to filter by project.",\n      "default": "/",\n      "type": "string"\n    },\n    "default_schema_map": {\n      "title": "Default Schema Map",\n      "description": "Default schema to use when schema is not found.",\n      "default": {},\n      "type": "object"\n    },\n    "ingest_tags": {\n      "title": "Ingest Tags",\n      "description": "Ingest Tags from source. This will override Tags entered from UI",\n      "default": false,\n      "type": "boolean"\n    },\n    "ingest_owner": {\n      "title": "Ingest Owner",\n      "description": "Ingest Owner from source. This will override Owner info entered from UI",\n      "default": false,\n      "type": "boolean"\n    },\n    "ingest_tables_external": {\n      "title": "Ingest Tables External",\n      "description": "Ingest details for tables external to (not embedded in) tableau as entities.",\n      "default": false,\n      "type": "boolean"\n    },\n    "page_size": {\n      "title": "Page Size",\n      "description": "[advanced] Number of metadata objects (e.g. CustomSQLTable, PublishedDatasource, etc) to query at a time using the Tableau API.",\n      "default": 10,\n      "type": "integer"\n    },\n    "workbook_page_size": {\n      "title": "Workbook Page Size",\n      "description": "[advanced] Number of workbooks to query at a time using the Tableau API.",\n      "default": 1,\n      "type": "integer"\n    },\n    "lineage_overrides": {\n      "title": "Lineage Overrides",\n      "description": "Mappings to change generated dataset urns. Use only if you really know what you are doing.",\n      "allOf": [\n        {\n          "$ref": "#/definitions/TableauLineageOverrides"\n        }\n      ]\n    },\n    "extract_usage_stats": {\n      "title": "Extract Usage Stats",\n      "description": "[experimental] Extract usage statistics for dashboards and charts.",\n      "default": false,\n      "type": "boolean"\n    },\n    "ingest_embed_url": {\n      "title": "Ingest Embed Url",\n      "description": "Ingest a URL to render an embedded Preview of assets within Tableau.",\n      "default": true,\n      "type": "boolean"\n    },\n    "extract_project_hierarchy": {\n      "title": "Extract Project Hierarchy",\n      "description": "Whether to extract entire project hierarchy for nested projects.",\n      "default": true,\n      "type": "boolean"\n    }\n  },\n  "required": [\n    "connect_uri"\n  ],\n  "additionalProperties": false,\n  "definitions": {\n    "DynamicTypedStateProviderConfig": {\n      "title": "DynamicTypedStateProviderConfig",\n      "type": "object",\n      "properties": {\n        "type": {\n          "title": "Type",\n          "description": "The type of the state provider to use. For DataHub use `datahub`",\n          "type": "string"\n        },\n        "config": {\n          "title": "Config",\n          "description": "The configuration required for initializing the state provider. Default: The datahub_api config if set at pipeline level. Otherwise, the default DatahubClientConfig. See the defaults (https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19)."\n        }\n      },\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false\n    },\n    "StatefulStaleMetadataRemovalConfig": {\n      "title": "StatefulStaleMetadataRemovalConfig",\n      "description": "Base specialized config for Stateful Ingestion with stale metadata removal capability.",\n      "type": "object",\n      "properties": {\n        "enabled": {\n          "title": "Enabled",\n          "description": "The type of the ingestion state provider registered with datahub.",\n          "default": false,\n          "type": "boolean"\n        },\n        "ignore_old_state": {\n          "title": "Ignore Old State",\n          "description": "If set to True, ignores the previous checkpoint state.",\n          "default": false,\n          "type": "boolean"\n        },\n        "ignore_new_state": {\n          "title": "Ignore New State",\n          "description": "If set to True, ignores the current checkpoint state.",\n          "default": false,\n          "type": "boolean"\n        },\n        "remove_stale_metadata": {\n          "title": "Remove Stale Metadata",\n          "description": "Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled.",\n          "default": true,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    },\n    "AllowDenyPattern": {\n      "title": "AllowDenyPattern",\n      "description": "A class to store allow deny regexes",\n      "type": "object",\n      "properties": {\n        "allow": {\n          "title": "Allow",\n          "description": "List of regex patterns to include in ingestion",\n          "default": [\n            ".*"\n          ],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "deny": {\n          "title": "Deny",\n          "description": "List of regex patterns to exclude from ingestion.",\n          "default": [],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "ignoreCase": {\n          "title": "Ignorecase",\n          "description": "Whether to ignore case sensitivity during pattern matching.",\n          "default": true,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    },\n    "TableauLineageOverrides": {\n      "title": "TableauLineageOverrides",\n      "type": "object",\n      "properties": {\n        "platform_override_map": {\n          "title": "Platform Override Map",\n          "description": "A holder for platform -> platform mappings to generate correct dataset urns",\n          "type": "object",\n          "additionalProperties": {\n            "type": "string"\n          }\n        }\n      },\n      "additionalProperties": false\n    }\n  }\n}\n')))),(0,r.kt)("h3",{id:"code-coordinates"},"Code Coordinates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Class Name: ",(0,r.kt)("inlineCode",{parentName:"li"},"datahub.ingestion.source.tableau.TableauSource")),(0,r.kt)("li",{parentName:"ul"},"Browse on ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/tableau.py"},"GitHub"))),(0,r.kt)("h2",{id:"questions"},"Questions"),(0,r.kt)("p",null,"If you've got any questions on configuring ingestion for Tableau, feel free to ping us on ",(0,r.kt)("a",{parentName:"p",href:"https://slack.datahubproject.io"},"our Slack")))}c.isMDXComponent=!0}}]);